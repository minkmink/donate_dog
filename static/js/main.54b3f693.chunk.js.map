{"version":3,"sources":["connect.js","index.js"],"names":["Connect","_this","this","Object","classCallCheck","donate","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","state","IcxTransactionBuilder","networkId","transaction","rawTransaction","wrap","_context","prev","next","IconBuilder","IconConverter","toBigNumber","from","address","to","scoreAddress","value","IconAmount","of","Unit","ICX","toLoop","stepLimit","toHex","timestamp","Date","getTime","nid","version","build","toRawTransaction","abrupt","stop","_x","apply","arguments","checkTransaction","param","Promise","resolve","timer","setInterval","tx","transactionResult","iconService","getTransactionResult","clearInterval","execute","alert","failure","message","checkTx","requestAddress","reject","listenerTimeout","setTimeout","window","removeEventListener","eventHandler","event","_event$detail","detail","type","payload","clearTimeout","addEventListener","dispatchEvent","CustomEvent","requestJsonRpc","_event$detail2","jsonrpc","method","params","id","HttpProvider","IconService","provider","Index","props","possibleConstructorReturn","getPrototypeOf","call","onClick","connect","sent","setState","onChange","e","target","onClickDonation","_callee2","txHash","res","_context2","objectSpread","result","status","ref","innerHTML","react_default","createElement","react","className","Component","ReactDOM","render","src_Index","document","getElementById"],"mappings":"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","file":"static/js/main.54b3f693.chunk.js","sourcesContent":["\n\nimport IconService, {\n    IconConverter,\n    IconBuilder,\n    IconAmount\n  } from \"icon-sdk-js\";\n\n  \n\n  \nexport default class Connect{\n    constructor() {\n        const { HttpProvider } = IconService;\n\n        //mainnet\n        this.provider = new HttpProvider(\"https://wallet.icon.foundation/api/v3\");\n        this.scoreAddress = \"cxc0ee4e662cf60fbb78c213e48382d29437f7ffd4\";\n        this.nid = \"0x1\";\n\n\n        //testnet\n        // this.provider = new HttpProvider(\"https://bicon.net.solidwallet.io/api/v3\");\n        // this.scoreAddress = \"cxd8357c63ad5020db68ce4473ab21fc6b52791fc4\";\n        // this.nid = \"0x3\";\n\n        \n        this.iconService = new IconService(this.provider);\n        \n    }\n    donate = async (state) =>{\n      const { IcxTransactionBuilder } = IconBuilder;\n      const networkId = IconConverter.toBigNumber(1);\n      const transaction = new IcxTransactionBuilder()\n          .from(state.address)\n          .to(this.scoreAddress)\n          .value(IconAmount.of(state.value, IconAmount.Unit.ICX).toLoop())\n          .stepLimit(IconConverter.toHex(1000000))\n          .timestamp((new Date()).getTime() * 1000)\n          .nid(networkId)\n          .version(IconConverter.toHex(3))\n          .build();\n      const rawTransaction = IconConverter.toRawTransaction(transaction);\n      return rawTransaction\n    }\n      checkTransaction = param =>\n      new Promise(resolve => {\n        let timer;\n        const checkTx = tx => {\n          const transactionResult = this.iconService.getTransactionResult(tx);\n          if (transactionResult) {\n            clearInterval(timer);\n            resolve(transactionResult.execute());\n          } else {\n            clearInterval(timer);\n            alert(transactionResult.failure.message);\n          }\n        };\n        timer = setInterval(() => {\n          checkTx(param);\n        }, 5000);\n      });\n  \n\n       requestAddress = () => {\n        return new Promise((resolve, reject) => {\n          const listenerTimeout = setTimeout(() => {\n            window.removeEventListener(\"ICONEX_RELAY_RESPONSE\", eventHandler, false);\n            reject(\"timeout\");\n          }, 10000);\n          window.addEventListener(\"ICONEX_RELAY_RESPONSE\", eventHandler, false);\n          window.dispatchEvent(\n            new CustomEvent(\"ICONEX_RELAY_REQUEST\", {\n              detail: {\n                type: \"REQUEST_ADDRESS\"\n              }\n            })\n          );\n          function eventHandler(event) {\n            const { type, payload } = event.detail;\n            if (type === \"RESPONSE_ADDRESS\") {\n              window.removeEventListener(\n                \"ICONEX_RELAY_RESPONSE\",\n                eventHandler,\n                false\n              );\n              clearTimeout(listenerTimeout);\n              resolve(payload);\n            }\n          }\n        });\n      }\n      \n     requestJsonRpc =(rawTransaction)=> {\n        return new Promise(resolve => {\n          window.removeEventListener(\"ICONEX_RELAY_RESPONSE\", eventHandler, false);\n          window.addEventListener(\"ICONEX_RELAY_RESPONSE\", eventHandler, false);\n          window.dispatchEvent(\n            new CustomEvent(\"ICONEX_RELAY_REQUEST\", {\n              detail: {\n                type: \"REQUEST_JSON-RPC\",\n                payload: {\n                  jsonrpc: \"2.0\",\n                  method: \"icx_sendTransaction\",\n                  params: rawTransaction,\n                  id: new Date().getTime()\n                }\n              }\n            })\n          );\n          function eventHandler(event) {\n            const { type, payload } = event.detail;\n            if (type === \"RESPONSE_JSON-RPC\") {\n              window.removeEventListener(\n                \"ICONEX_RELAY_RESPONSE\",\n                eventHandler,\n                false\n              );\n              resolve(payload);\n            }\n          }\n        });\n      }\n}","import React, { Component, Fragment } from 'react'\nimport ReactDOM from 'react-dom';\nimport Connect from './connect';\n\nimport './index.css'\nexport default class Index extends Component {\n    constructor(props) {\n        super(props)\n      \n        this.state = {\n          address:'',\n          value:1\n        }\n        this.connect = new Connect()\n      }\n    onClick = async () => {\n        const address = await this.connect.requestAddress();\n        if(address){\n            this.setState({\n                address\n            })\n        }\n    }\n    onChange=(e)=>{\n        this.setState({\n           value:e.target.value\n        })\n    }\n    onClickDonation = async ()=>{\n        const transaction = await this.connect.donate({...this.state});\n        const txHash = await this.connect.requestJsonRpc(transaction);\n        const res = await this.connect.checkTransaction(txHash.result);\n        if(res.status ===1 && res.txHash){\n            this.ref.innerHTML = res.txHash\n        }\n    }\n\n    render() {\n        return (\n            <Fragment>\n            <div>\n                \n                <div>\n                <label>기부 ICX</label> <input type='number' onChange={this.onChange}  value={this.state.value}/>    \n                <button onClick={this.onClick}>로그인</button> \n                <button className='bottom'onClick={this.onClickDonation}>기부하기</button></div>\n            </div>\n            </Fragment>\n        )\n    }\n}\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\n;\n"],"sourceRoot":""}